//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""9c2fe295-99cd-4a3d-b5ab-c30e19a18a51"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c9077861-ec81-40c5-a9f9-10219477b7ce"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""17df54c2-8d76-4d6d-ae42-ecafeafa7823"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""792950a4-a221-4da9-907a-4e6da2ac2c58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCircle"",
                    ""type"": ""Button"",
                    ""id"": ""700c4665-5f08-4253-9e2b-f26bca603e42"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTriangle"",
                    ""type"": ""Button"",
                    ""id"": ""ea176954-c296-4156-91ab-6b72f65f5007"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeSquare"",
                    ""type"": ""Button"",
                    ""id"": ""34d6ac3f-c14d-4719-896d-0ca9ccb9c4f8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""aeea2133-6e33-4ba7-a75f-6821321976b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dd209814-13ac-413d-80a2-07fa76f4acea"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""faf1bb32-f79b-44f8-87c3-cd576c746315"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""648779c7-421b-468b-9541-87672d19a109"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d7fab5da-9a09-459e-9bd6-871a6859ec24"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a04ef1c3-d18f-42d9-9320-82b90406318a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8cf70c1-23d0-41af-a885-f19a9a7a545c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""015543d8-d1b7-408a-aa7d-44dd69c5cd0b"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""ChangeCircle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb0536cc-58b4-40e1-ab16-f834a82691e1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""ChangeTriangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4eca172b-3c2e-4542-8e41-376d66d03c50"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""ChangeSquare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df310a4-9a34-4fae-83cc-04206dd393de"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialougeActions"",
            ""id"": ""78d18030-a4b6-4aff-bde3-cdaaf1c44ac4"",
            ""actions"": [
                {
                    ""name"": ""NextDialouge"",
                    ""type"": ""Button"",
                    ""id"": ""9f978ef9-2596-4f2e-8645-c79ad8c65f61"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25337caf-39fc-449a-afd5-d72d95231a2b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e179a8c-057a-40c2-b833-0093666f1aff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Move = m_PlayerActions.FindAction("Move", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Special = m_PlayerActions.FindAction("Special", throwIfNotFound: true);
        m_PlayerActions_ChangeCircle = m_PlayerActions.FindAction("ChangeCircle", throwIfNotFound: true);
        m_PlayerActions_ChangeTriangle = m_PlayerActions.FindAction("ChangeTriangle", throwIfNotFound: true);
        m_PlayerActions_ChangeSquare = m_PlayerActions.FindAction("ChangeSquare", throwIfNotFound: true);
        m_PlayerActions_Enter = m_PlayerActions.FindAction("Enter", throwIfNotFound: true);
        // DialougeActions
        m_DialougeActions = asset.FindActionMap("DialougeActions", throwIfNotFound: true);
        m_DialougeActions_NextDialouge = m_DialougeActions.FindAction("NextDialouge", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerActions.enabled, "This will cause a leak and performance issues, PlayerInputActions.PlayerActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DialougeActions.enabled, "This will cause a leak and performance issues, PlayerInputActions.DialougeActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Move;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Special;
    private readonly InputAction m_PlayerActions_ChangeCircle;
    private readonly InputAction m_PlayerActions_ChangeTriangle;
    private readonly InputAction m_PlayerActions_ChangeSquare;
    private readonly InputAction m_PlayerActions_Enter;
    public struct PlayerActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerActions_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Special => m_Wrapper.m_PlayerActions_Special;
        public InputAction @ChangeCircle => m_Wrapper.m_PlayerActions_ChangeCircle;
        public InputAction @ChangeTriangle => m_Wrapper.m_PlayerActions_ChangeTriangle;
        public InputAction @ChangeSquare => m_Wrapper.m_PlayerActions_ChangeSquare;
        public InputAction @Enter => m_Wrapper.m_PlayerActions_Enter;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
            @ChangeCircle.started += instance.OnChangeCircle;
            @ChangeCircle.performed += instance.OnChangeCircle;
            @ChangeCircle.canceled += instance.OnChangeCircle;
            @ChangeTriangle.started += instance.OnChangeTriangle;
            @ChangeTriangle.performed += instance.OnChangeTriangle;
            @ChangeTriangle.canceled += instance.OnChangeTriangle;
            @ChangeSquare.started += instance.OnChangeSquare;
            @ChangeSquare.performed += instance.OnChangeSquare;
            @ChangeSquare.canceled += instance.OnChangeSquare;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
            @ChangeCircle.started -= instance.OnChangeCircle;
            @ChangeCircle.performed -= instance.OnChangeCircle;
            @ChangeCircle.canceled -= instance.OnChangeCircle;
            @ChangeTriangle.started -= instance.OnChangeTriangle;
            @ChangeTriangle.performed -= instance.OnChangeTriangle;
            @ChangeTriangle.canceled -= instance.OnChangeTriangle;
            @ChangeSquare.started -= instance.OnChangeSquare;
            @ChangeSquare.performed -= instance.OnChangeSquare;
            @ChangeSquare.canceled -= instance.OnChangeSquare;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // DialougeActions
    private readonly InputActionMap m_DialougeActions;
    private List<IDialougeActionsActions> m_DialougeActionsActionsCallbackInterfaces = new List<IDialougeActionsActions>();
    private readonly InputAction m_DialougeActions_NextDialouge;
    public struct DialougeActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public DialougeActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextDialouge => m_Wrapper.m_DialougeActions_NextDialouge;
        public InputActionMap Get() { return m_Wrapper.m_DialougeActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialougeActionsActions set) { return set.Get(); }
        public void AddCallbacks(IDialougeActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_DialougeActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialougeActionsActionsCallbackInterfaces.Add(instance);
            @NextDialouge.started += instance.OnNextDialouge;
            @NextDialouge.performed += instance.OnNextDialouge;
            @NextDialouge.canceled += instance.OnNextDialouge;
        }

        private void UnregisterCallbacks(IDialougeActionsActions instance)
        {
            @NextDialouge.started -= instance.OnNextDialouge;
            @NextDialouge.performed -= instance.OnNextDialouge;
            @NextDialouge.canceled -= instance.OnNextDialouge;
        }

        public void RemoveCallbacks(IDialougeActionsActions instance)
        {
            if (m_Wrapper.m_DialougeActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialougeActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_DialougeActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialougeActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialougeActionsActions @DialougeActions => new DialougeActionsActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnChangeCircle(InputAction.CallbackContext context);
        void OnChangeTriangle(InputAction.CallbackContext context);
        void OnChangeSquare(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
    }
    public interface IDialougeActionsActions
    {
        void OnNextDialouge(InputAction.CallbackContext context);
    }
}
